{
    "title": "Amazon Lex Runtime Service",
    "description": "Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . ",
    "docsUrl": "https://docs.aws.amazon.com/lex/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/runtime.lex/2016-11-28/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://runtime.lex.amazonaws.com/",
                    "http://runtime.lex.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "PostContent": {
            "main": "./lib/actions/PostContent.js",
            "title": "PostContent",
            "description": " Sends user input (text or speech) to Amazon Lex. Clients use this API to send\ntext and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user\ninput using the machine learning model that it built for the bot. \n\nThe PostContent operation supports audio input at 8kHz and 16kHz. You can use\n8kHz audio to achieve higher speech recognition accuracy in telephone audio\napplications. \n\n In response, Amazon Lex returns the next message to convey to the user.\nConsider the following example messages: \n\n *   For a user input \"I would like a pizza,\" Amazon Lex might return a response\n   with a message eliciting slot data (for example, PizzaSize): \"What size pizza\n   would you like?\". \n   \n   \n *   After the user provides all of the pizza order information, Amazon Lex\n   might return a response with a message to get user confirmation: \"Order the\n   pizza?\". \n   \n   \n *   After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might\n   return a conclusion statement: \"Thank you, your cheese pizza has been\n   ordered.\". \n   \n   \n\n Not all Amazon Lex messages require a response from the user. For example,\nconclusion statements do not require a response. Some messages require only a\nyes or no response. In addition to the message, Amazon Lex provides additional\ncontext about the message in the response that you can use to enhance client\nbehavior, such as displaying the appropriate client user interface. Consider the\nfollowing examples: \n\n *   If the message is to elicit slot data, Amazon Lex returns the following\n   context information: \n   \n    *   x-amz-lex-dialog-state header set to ElicitSlot \n      \n      \n    *   x-amz-lex-intent-name header set to the intent name in the current\n      context \n      \n      \n    *   x-amz-lex-slot-to-elicit header set to the slot name for which the \n      message is eliciting information \n      \n      \n    *   x-amz-lex-slots header set to a map of slots configured for the intent\n      with their current values \n      \n      \n   \n   \n *   If the message is a confirmation prompt, the x-amz-lex-dialog-state header\n   is set to Confirmation and the x-amz-lex-slot-to-elicit header is omitted. \n   \n   \n *   If the message is a clarification prompt configured for the intent,\n   indicating that the user intent is not understood, the x-amz-dialog-state \n   header is set to ElicitIntent and the x-amz-slot-to-elicit header is omitted. \n   \n   \n\n In addition, Amazon Lex also returns your application-specific \nsessionAttributes. For more information, see Managing Conversation Context\n[http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PostContent.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PostText": {
            "main": "./lib/actions/PostText.js",
            "title": "PostText",
            "description": "Sends user input (text-only) to Amazon Lex. Client applications can use this API\nto send requests to Amazon Lex at runtime. Amazon Lex then interprets the user\ninput using the machine learning model it built for the bot. \n\n In response, Amazon Lex returns the next message to convey to the user an\noptional responseCard to display. Consider the following example messages: \n\n *   For a user input \"I would like a pizza\", Amazon Lex might return a response\n   with a message eliciting slot data (for example, PizzaSize): \"What size pizza\n   would you like?\" \n   \n   \n *   After the user provides all of the pizza order information, Amazon Lex\n   might return a response with a message to obtain user confirmation \"Proceed\n   with the pizza order?\". \n   \n   \n *   After the user replies to a confirmation prompt with a \"yes\", Amazon Lex\n   might return a conclusion statement: \"Thank you, your cheese pizza has been\n   ordered.\". \n   \n   \n\n Not all Amazon Lex messages require a user response. For example, a conclusion\nstatement does not require a response. Some messages require only a \"yes\" or\n\"no\" user response. In addition to the message, Amazon Lex provides additional\ncontext about the message in the response that you might use to enhance client\nbehavior, for example, to display the appropriate client user interface. These\nare the slotToElicit, dialogState, intentName, and slots fields in the response.\nConsider the following examples: \n\n *  If the message is to elicit slot data, Amazon Lex returns the following\n   context information:\n   \n    *   dialogState set to ElicitSlot \n      \n      \n    *   intentName set to the intent name in the current context \n      \n      \n    *   slotToElicit set to the slot name for which the message is eliciting\n      information \n      \n      \n    *   slots set to a map of slots, configured for the intent, with currently\n      known values \n      \n      \n   \n   \n *   If the message is a confirmation prompt, the dialogState is set to\n   ConfirmIntent and SlotToElicit is set to null. \n   \n   \n *  If the message is a clarification prompt (configured for the intent) that\n   indicates that user intent is not understood, the dialogState is set to\n   ElicitIntent and slotToElicit is set to null. \n   \n   \n\n In addition, Amazon Lex also returns your application-specific \nsessionAttributes. For more information, see Managing Conversation Context\n[http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html].",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PostText.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}